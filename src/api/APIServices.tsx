import apiClient from "./apiClient";
import { User } from "../types/user";
import { Project } from "../types/project";
import { Task } from "@/types/task";

// üîπ R√©cup√©rer tous les utilisateurs
export const getUsers = async (): Promise<User[]> => {
  try {
    const response = await apiClient.get<User[]>("/api/users");
    console.log("R√©ponse API utilisateurs : ", response.data);
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des utilisateurs : ", error);
    throw error;
  }
};

// üîπ Cr√©er un projet
export const creerProjet = async (projetData: Project, userId: number): Promise<Project> => {
  try {
    const response = await apiClient.post<Project>(`/api/projets/create?userId=${userId}`, projetData);
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la cr√©ation du projet :", error);
    throw error;
  }
};

// üîπ R√©cup√©rer tous les projets
export const fetchProjects = async (): Promise<Project[]> => {
  try {
    const response = await apiClient.get<Project[]>("/api/projets");
    console.log("R√©ponse API projets : ", response.data);
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des projets : ", error);
    throw error;
  }
};

// üîπ R√©cup√©rer les t√¢ches d‚Äôun projet
export const fetchTachesByProject = async (projectId: number): Promise<Task[]> => {
  try {
    const response = await apiClient.get<Task[]>(`/api/projets/${projectId}/taches`);
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des t√¢ches :", error);
    throw error;
  }
};

// üîπ Mettre √† jour le statut d‚Äôune t√¢che
export const updateTacheStatus = async (id: number, newStatus: string): Promise<Task> => {
  try {
    const response = await apiClient.put<Task>(`/api/taches/${id}`, { statut: newStatus });
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la mise √† jour du statut :", error);
    throw error;
  }
};

// üîπ Cr√©er une t√¢che
export const createTache = async (tacheData: Task, projectId: number): Promise<Task> => {
  try {
    const response = await apiClient.post<Task>(`/api/taches?projectId=${projectId}`, tacheData);
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la cr√©ation de la t√¢che :", error);
    throw error;
  }
};

// üîπ Modifier le titre (‚ö†Ô∏è n√©cessite support c√¥t√© backend)
export async function updateTacheTitre(id: number, titre: string): Promise<Task> {
  try {
    const response = await apiClient.put<Task>(`/api/taches/${id}`, { titre });
    return response.data;
  } catch (error) {
    console.error("Erreur lors de la modification du titre :", error);
    throw error;
  }
}


// üîπ Supprimer une t√¢che
export const deleteTache = async (id: number): Promise<void> => {
  try {
    await apiClient.delete(`/api/taches/${id}`);
  } catch (error: any) {
    if (error.response?.status === 404) {
      console.warn("T√¢che d√©j√† supprim√©e.");
    } else {
      console.error("Erreur API suppression t√¢che :", error);
      throw new Error("Erreur lors de la suppression");
    }
  }
};
